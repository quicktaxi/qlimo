{"version":3,"sources":["app/account/signup/signup.controller.js"],"names":[],"mappings":"AAAA;;;;;;IAEM,gB;AACJ;;AAEA,4BAAY,KAAZ,EAAmB,IAAnB,EAAyB,MAAzB,EAAiC;AAAA;;AAC7B,SAAK,IAAL,GAAY,IAAZ;AACA,SAAK,MAAL,GAAc,MAAd;AACA,SAAK,KAAL,GAAa,KAAb;AACD;AACD;;;;;6BAGO,I,EAAM;AAAA;;AACb,WAAK,SAAL,GAAiB,IAAjB;;AAEA,UAAI,KAAK,MAAT,EAAiB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACQ,aAAK,KAAL,CAAW,IAAX,CAAgB,YAAhB,EAA8B;AAC1B,oBAAU,OADgB;AAE1B,gBAAM,MAFoB;AAG1B,gBAAM,KAAK,IAAL,CAAU,IAHU;AAI1B,iBAAO,KAAK,IAAL,CAAU,KAJS;AAK1B,oBAAU,KAAK,IAAL,CAAU;AALM,SAA9B,EAOC,IAPD,CAOM,YAAM;AACR,kBAAQ,GAAR,CAAY,MAAK,IAAL,CAAU,IAAV,GAAe,cAAf,GAA8B,MAAK,IAAL,CAAU,KAApD;AACF;AACA,gBAAK,MAAL,CAAY,EAAZ,CAAe,MAAf;AACD,SAXD,EAYC,KAZD,CAYO,eAAO;AACZ,gBAAM,IAAI,IAAV;AACA,gBAAK,MAAL,GAAc,EAAd;;AAEA;AACA,kBAAQ,OAAR,CAAgB,IAAI,MAApB,EAA4B,UAAC,KAAD,EAAQ,KAAR,EAAkB;AAC5C,iBAAK,KAAL,EAAY,YAAZ,CAAyB,UAAzB,EAAqC,KAArC;AACA,kBAAK,MAAL,CAAY,KAAZ,IAAqB,MAAM,OAA3B;AACD,WAHD;AAID,SArBD;AAuBH;AACF;;;8CAEyB,I,EAAM;AAAA;;AAC9B,WAAK,SAAL,GAAiB,IAAjB;;AAEA,UAAI,KAAK,MAAT,EAAiB;;AAGrB;AACA;AACA;AACA;AACA;;AAEQ,aAAK,KAAL,CAAW,IAAX,CAAgB,YAAhB,EAA8B;AAC1B,oBAAU,OADgB;AAE1B,gBAAM,iBAFoB;AAG1B,gBAAM,KAAK,IAAL,CAAU,IAHU;AAI1B,iBAAO,KAAK,IAAL,CAAU,KAJS;AAK1B,oBAAU,KAAK,IAAL,CAAU;AALM,SAA9B,EAOC,IAPD,CAOM,YAAM;AACR,iBAAK,KAAL,CAAW,IAAX,CAAgB,uBAAhB,EAAyC;AACrC,0BAAc,OAAK,IAAL,CAAU,YADa;AAErC,wBAAY,OAAK,IAAL,CAAU,IAFe;AAGrC,uBAAW,OAAK,IAAL,CAAU,SAHgB;AAIrC,mBAAO,OAAK,IAAL,CAAU,KAJoB;AAKrC,wBAAY,OAAK,IAAL,CAAU,UALe;AAMrC,8BAAkB,OAAK,IAAL,CAAU,gBANS;AAOrC,oCAAwB,OAAK,IAAL,CAAU,sBAPG;AAQrC,qCAAyB,OAAK,IAAL,CAAU,uBARE;AASrC,oBAAQ;AAT6B,WAAzC;AAWH,SAnBD,EAqBC,IArBD,CAqBM,YAAM;AACV;AACA,iBAAK,MAAL,CAAY,EAAZ,CAAe,MAAf;AACD,SAxBD,EAyBC,KAzBD,CAyBO,eAAO;AACZ,gBAAM,IAAI,IAAV;AACA,iBAAK,MAAL,GAAc,EAAd;AACA;AACA,kBAAQ,OAAR,CAAgB,IAAI,MAApB,EAA4B,UAAC,KAAD,EAAQ,KAAR,EAAkB;AAC5C,iBAAK,KAAL,EAAY,YAAZ,CAAyB,UAAzB,EAAqC,KAArC;AACA,mBAAK,MAAL,CAAY,KAAZ,IAAqB,MAAM,OAA3B;AACD,WAHD;AAID,SAjCD;AAoCH;AAEF;;;;;;AAMH,QAAQ,MAAR,CAAe,WAAf,EACG,UADH,CACc,kBADd,EACkC,gBADlC","file":"app/account/signup/signup.controller.js","sourcesContent":["'use strict';\n\nclass SignupController {\n  //end-non-standard\n\n  constructor($http, Auth, $state) {\n      this.Auth = Auth;\n      this.$state = $state;\n      this.$http = $http;\n    }\n    //start-non-standard\n\n\n  register(form) {\n    this.submitted = true;\n\n    if (form.$valid) {\n//      this.Auth.createUser({\n//          provider: 'local',\n//          role: 'user',\n//          name: this.user.name,\n//          email: this.user.email,\n//          password: this.user.password\n//        })\n        this.$http.post('/api/users', {\n            provider: 'local',\n            role: 'user',\n            name: this.user.name,\n            email: this.user.email,\n            password: this.user.password\n        })\n        .then(() => {\n            console.log(this.user.name+\" gggggggggg \"+this.user.email);\n          // Account created, redirect to home\n          this.$state.go('main');\n        })\n        .catch(err => {\n          err = err.data;\n          this.errors = {};\n\n          // Update validity of form fields that match the mongoose errors\n          angular.forEach(err.errors, (error, field) => {\n            form[field].$setValidity('mongoose', false);\n            this.errors[field] = error.message;\n          });\n        });\n        \n    }\n  }\n\n  register_service_provider(form) {\n    this.submitted = true;\n\n    if (form.$valid) {\n\n\n//      this.Auth.createUser({\n//          name: this.user.name,\n//          email: this.user.email,\n//          password: this.user.password\n//        })\n        \n        this.$http.post('/api/users', {\n            provider: 'local',\n            role: 'serviceProvider',\n            name: this.user.name,\n            email: this.user.email,\n            password: this.user.password\n        })\n        .then(() => {\n            this.$http.post('/api/serviceproviders', {\n                company_name: this.user.company_name,\n                first_name: this.user.name,\n                last_name: this.user.last_name,\n                email: this.user.email,\n                free_trial: this.user.free_trial,\n                no_of_free_trail: this.user.no_of_free_trail,\n                annual_app_renewal_fee: this.user.annual_app_renewal_fee,\n                maximum_allowed_vehicle: this.user.maximum_allowed_vehicle,\n                status: 'Pending'\n            });\n        })\n\n        .then(() => {\n          // Account created, redirect to home\n          this.$state.go('main');\n        })\n        .catch(err => {\n          err = err.data;\n          this.errors = {};\n          // Update validity of form fields that match the mongoose errors\n          angular.forEach(err.errors, (error, field) => {\n            form[field].$setValidity('mongoose', false);\n            this.errors[field] = error.message;\n          });\n        });\n\n\n    }\n    \n  }\n  \n  \n  \n}\n\nangular.module('aacrudApp')\n  .controller('SignupController', SignupController);\n"],"sourceRoot":"/source/"}